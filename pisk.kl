PROGRAM pisk
%COMMENT='Piskvorky1'
%NOLOCKGROUP
-- %NOPAUSE = ERROR+COMMAND+TPENABLE

TYPE 
--NodeType = STRUCTURE
--    value :  ARRAY[9] OF INTEGER
--   left  : INTEGER
--    right : INTEGER
--    created: BOOLEAN
--ENDSTRUCTURE

BMOVE = STRUCTURE
	x: INTEGER
	y: INTEGER
ENDSTRUCTURE

CONST
	--MAX_NODES = 30000
	PLAYER = 0
	AI = 1
	EMPTY = -1
VAR
	-- tree: ARRAY[MAX_NODES] OF NodeType
	board:  ARRAY[9] OF INTEGER
	-- nodeCount: INTEGER
	i: INTEGER
	x: INTEGER
	y: INTEGER
	user: INTEGER
	
	reg_x: INTEGER
	reg_y: INTEGER
	reg_p: INTEGER -- Player
	reg_real: REAL
	reg_status: INTEGER
	reg_game: INTEGER
	prog: INTEGER
	bily: INTEGER     -- kolik je bilych na hromade
	cerny: INTEGER -- kolik je cernych na hromade
	movetm: BMOVE
	running: BOOLEAN

ROUTINE ISMOVELEFT(b: ARRAY[*] OF INTEGER): BOOLEAN
VAR
	ism_i: INTEGER
BEGIN
	FOR ism_i = 1 TO 9 DO
		IF b[ism_i] = -1 THEN
			RETURN(TRUE)
		ENDIF
	ENDFOR
	RETURN(FALSE)
END ISMOVELEFT

ROUTINE EVALUATE(b: ARRAY[*] OF INTEGER): INTEGER
VAR
    col: INTEGER
    row: INTEGER
BEGIN
    FOR row = 1 TO 3 DO
        IF (b[(row - 1) * 3 + 1] = b[(row - 1) * 3 + 2]) AND (b[(row - 1) * 3 + 2] = b[(row - 1) * 3 + 3]) THEN
            IF (b[(row - 1) * 3 + 1] = AI) THEN
                RETURN(10)
            ENDIF
            IF (b[(row - 1) * 3 + 1] = PLAYER) THEN
                RETURN(-10)
            ENDIF
        ENDIF
    ENDFOR

    FOR col = 1 TO 3 DO
        IF (b[col] = b[col + 3]) AND (b[col + 3] = b[col + 6]) THEN
            IF (b[col] = AI) THEN
                RETURN(10)
            ENDIF
            IF (b[col] = PLAYER) THEN
                RETURN(-10)
            ENDIF
        ENDIF
    ENDFOR

    IF (b[1] = b[5]) AND (b[5] = b[9]) THEN
        IF (b[1] = AI) THEN
            RETURN(10)
        ENDIF
        IF (b[1] = PLAYER) THEN
            RETURN(-10)
        ENDIF
    ENDIF

    IF (b[3] = b[5]) AND (b[5] = b[7]) THEN
        IF (b[3] = AI) THEN
            RETURN(10)
        ENDIF
        IF (b[3] = PLAYER) THEN
            RETURN(-10)
        ENDIF
    ENDIF

    RETURN(0)
END EVALUATE


ROUTINE MAX_I(a: INTEGER; b: INTEGER): INTEGER
BEGIN
	IF a > b THEN
		RETURN(a)
	ELSE
		RETURN(b)
	ENDIF
END MAX_I

ROUTINE MIN_I(a: INTEGER; b: INTEGER): INTEGER
BEGIN
	IF a > b THEN
		RETURN(b)
	ELSE
		RETURN(a)
	ENDIF
END MIN_I


ROUTINE MINIMAX(b: ARRAY[*] OF INTEGER; depth: INTEGER; ismax: BOOLEAN): INTEGER
VAR
	score: INTEGER
	best: INTEGER
	mnm_i: INTEGER
	mnm_row: INTEGER
	mnm_col: INTEGER
BEGIN
	score = EVALUATE(b)
	IF (score = 10) OR (score = -10) THEN
		RETURN(score)
	ENDIF
	
	IF(ISMOVELEFT(B) = FALSE) THEN
		RETURN (0)
	ENDIF
	
	IF ismax THEN
		best = -1000
		FOR mnm_i = 1 TO 9 DO
			mnm_row = (mnm_i-1) DIV 3 + 1
			mnm_col = (mnm_i-1) MOD 3 + 1
			IF b[mnm_i] = -1 THEN
				b[mnm_i] = AI
				
				best = MAX_I(best, MINIMAX(b, depth+1, NOT ismax))
				
				b[mnm_i] = -1
			ENDIF
		ENDFOR
		RETURN(best)
	ELSE
		best = 1000
		FOR mnm_i = 1 TO 9 DO
			IF b[mnm_i] = -1 THEN
				mnm_row = (mnm_i-1) DIV 3 + 1
				mnm_col = (mnm_i-1) MOD 3 + 1

				b[mnm_i] = PLAYER
				
				best = MIN_I(best, MINIMAX(b, depth+1, NOT ismax))
				
				b[mnm_i] = -1
			ENDIF
		ENDFOR
		RETURN(best)
	ENDIF
END MINIMAX


-- FIND BEST MOVE
ROUTINE FBM(b: ARRAY[*] OF INTEGER): BMOVE
VAR 
	bestval: INTEGER
	moveval: INTEGER
	fbm_row: INTEGER
	fbm_col: INTEGER
	fbm_i: INTEGER
	
	bestmove: BMOVE
BEGIN
	bestmove.x = -1
	bestmove.y = -1
	bestval = -10000
	WRITE('FBM called, evaluating board:', CHR(10))
	FOR fbm_i =  1 TO 9 DO
		IF b[fbm_i] = -1 THEN
			fbm_row = (fbm_i-1) DIV 3 + 1
			fbm_col = (fbm_i-1) MOD 3 + 1
		
			b[fbm_i] = AI
		
			moveval = minimax(b, 0, FALSE)
		
			b[fbm_i] = -1
			
			IF moveval > bestval THEN
				bestmove.x = fbm_row
				bestmove.y = fbm_col
				bestval = moveval
			ENDIF
		ENDIF
	ENDFOR
	RETURN(bestmove)
END FBM


ROUTINE DRAW_B(b: ARRAY[*] OF INTEGER)
VAR
	draw_i: INTEGER
BEGIN
	FOR draw_i = 1 TO 9 DO
		WRITE(b[draw_i])
		IF (draw_i MOD 3) = 0 THEN
			WRITE(CHR(10))
		ENDIF
	ENDFOR
END DRAW_B


BEGIN
	-- Vycisteni pole
	FOR i = 1 TO 9 DO 
		board[i] = -1
	ENDFOR
	running = TRUE
	WHILE(running) DO
		DRAW_B(board)
		READ(user)
		board[user] = PLAYER
		movetm = FBM(board)
		WRITE('Found best move=', movetm.x, ' ', movetm.y, CHR(10))
		IF NOT(movetm.x = -1) AND NOT(movetm.y = -1) THEN
			board[(movetm.x - 1) * 3 + movetm.y] = AI
		ENDIF
		IF EVALUATE(board) = -10 THEN
			WRITE('Player wins!', CHR(10))
			running = FALSE
		ENDIF
		IF EVALUATE(board) = 10 THEN
			WRITE('AI wins!', CHR(10))
			running = FALSE
		ENDIF
		IF NOT ISMOVELEFT(board) THEN
			WRITE('Draw!', CHR(10))
			running = FALSE
		ENDIF
	ENDWHILE
END pisk